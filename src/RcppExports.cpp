// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// soft_thresh
double soft_thresh(double x, double alpha);
RcppExport SEXP _SparseICA_soft_thresh(SEXP xSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_thresh(x, alpha));
    return rcpp_result_gen;
END_RCPP
}
// procrustes
arma::mat procrustes(arma::mat& X, arma::mat& V);
RcppExport SEXP _SparseICA_procrustes(SEXP XSEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(procrustes(X, V));
    return rcpp_result_gen;
END_RCPP
}
// relax_laplace
Rcpp::List relax_laplace(const arma::mat& xData, const arma::mat& newV, double nu, double lambda, double maxit, double eps);
RcppExport SEXP _SparseICA_relax_laplace(SEXP xDataSEXP, SEXP newVSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP maxitSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xData(xDataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type newV(newVSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(relax_laplace(xData, newV, nu, lambda, maxit, eps));
    return rcpp_result_gen;
END_RCPP
}
// runs_relax_laplace
Rcpp::List runs_relax_laplace(const arma::mat& xData, Rcpp::List& W, double runs, double r, double nu, double lambda, double maxit, double eps);
RcppExport SEXP _SparseICA_runs_relax_laplace(SEXP xDataSEXP, SEXP WSEXP, SEXP runsSEXP, SEXP rSEXP, SEXP nuSEXP, SEXP lambdaSEXP, SEXP maxitSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xData(xDataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type runs(runsSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(runs_relax_laplace(xData, W, runs, r, nu, lambda, maxit, eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SparseICA_soft_thresh", (DL_FUNC) &_SparseICA_soft_thresh, 2},
    {"_SparseICA_procrustes", (DL_FUNC) &_SparseICA_procrustes, 2},
    {"_SparseICA_relax_laplace", (DL_FUNC) &_SparseICA_relax_laplace, 6},
    {"_SparseICA_runs_relax_laplace", (DL_FUNC) &_SparseICA_runs_relax_laplace, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_SparseICA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
